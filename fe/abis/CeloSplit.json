{
  "address": "0xe8004F7Fc1dD07EA582C845FED79Ff18c67e3764",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expenseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "payers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "ExpenseAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "groupName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "groupImage",
          "type": "string"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expenseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "SplitPaid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_groupCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "addExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "celoUsd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_groupName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_groupImage",
          "type": "string"
        }
      ],
      "name": "createGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expenses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "getGroupDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "groupId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "groupName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupImage",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "members",
              "type": "address[]"
            }
          ],
          "internalType": "struct CeloSplit.MyGroups",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "getGroupExpenses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "groupId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "payers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            }
          ],
          "internalType": "struct CeloSplit.Expense[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "groupId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "groupName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupImage",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "members",
              "type": "address[]"
            }
          ],
          "internalType": "struct CeloSplit.MyGroups[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expenseId",
          "type": "uint256"
        }
      ],
      "name": "paySplit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewSplits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "groupId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expenseIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct CeloSplit.ViewPendingPayments[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x81087724f5f5e2998ac80a9bfd60df2fd300b3395eaae57cf2cdf49188ff4622",
  "receipt": {
    "to": null,
    "from": "0xd69a4dd0dfb261a8EF37F45925491C077EF1dBFb",
    "contractAddress": "0x7048802ad7CE3F52035dE87a4Fe85fA1c6632902",
    "transactionIndex": 0,
    "gasUsed": "2974338",
    "logsBloom": "0x
    "blockHash": "0x1138d033aa4d66569cafe21b64a9d775fa2b350db89a7de598176a30ddc86d18",
    "transactionHash": "0x81087724f5f5e2998ac80a9bfd60df2fd300b3395eaae57cf2cdf49188ff4622",
    "logs": [],
    "blockNumber": 21343420,
    "cumulativeGasUsed": "2974338",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x874069fa1eb16d44d622f2e0ca25eea172369bc1"],
  "numDeployments": 1,
  "solcInputHash": "44f4c30c8572cf6ba3e5e0628405da9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"ExpenseAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"SplitPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_groupCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"celoUsd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_groupName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_groupImage\",\"type\":\"string\"}],\"name\":\"createGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expenses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"internalType\":\"struct CeloSplit.MyGroups\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupExpenses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct CeloSplit.Expense[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"internalType\":\"struct CeloSplit.MyGroups[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"}],\"name\":\"paySplit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSplits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expenseIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct CeloSplit.ViewPendingPayments[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloSplit.sol\":\"CeloSplit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CeloSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n// import \\\"./SMToken.sol\\\";\\r\\n\\r\\ncontract CeloSplit {\\r\\n    // SMToken public smToken;\\r\\n    IERC20 public celoUsd;\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter public _groupCounter;\\r\\n\\r\\n    constructor(address tokenAddress) {\\r\\n        celoUsd = IERC20(tokenAddress);\\r\\n    }\\r\\n\\r\\n    struct Expense {\\r\\n        uint256 groupId;\\r\\n        address requester;\\r\\n        address[] payers;\\r\\n        uint256 amount;\\r\\n        string description;\\r\\n        uint256 share;\\r\\n    }\\r\\n\\r\\n    struct Group {\\r\\n        address[] members;\\r\\n        string groupName;\\r\\n        string description;\\r\\n        string groupImage;\\r\\n        mapping(address => bool) isMember;\\r\\n    }\\r\\n\\r\\n    struct MyGroups {\\r\\n        uint256 groupId;\\r\\n        string groupName;\\r\\n        string description;\\r\\n        string groupImage;\\r\\n        address[] members;\\r\\n    }\\r\\n\\r\\n    struct ViewPendingPayments {\\r\\n        uint256 groupId;\\r\\n        uint256 expenseIndex;\\r\\n        address requester;\\r\\n        uint256 amount;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    Expense[] public expenses;\\r\\n\\r\\n    mapping(uint256 => Group) private GroupListing;\\r\\n    mapping(address => mapping(uint256 => bool)) public isPaid;\\r\\n\\r\\n    event GroupCreated(\\r\\n        uint256 groupId,\\r\\n        address[] members,\\r\\n        string groupName,\\r\\n        string description,\\r\\n        string groupImage\\r\\n    );\\r\\n    event ExpenseAdded(\\r\\n        uint256 groupId,\\r\\n        uint256 expenseId,\\r\\n        address requester,\\r\\n        uint256 amount,\\r\\n        string description,\\r\\n        address[] payers,\\r\\n        uint256 share\\r\\n    );\\r\\n    event SplitPaid(uint256 groupId, uint256 expenseId, address payer, address requester, string description, uint256 share);\\r\\n\\r\\n    //Create Group\\r\\n    function createGroup(\\r\\n        address[] memory _members,\\r\\n        string memory _groupName,\\r\\n        string memory _description,\\r\\n        string memory _groupImage\\r\\n    ) public {\\r\\n        //must contain atleast 2 members in a group\\r\\n        require(_members.length > 1, \\\"At least two members is required\\\");\\r\\n\\r\\n        _groupCounter.increment();\\r\\n        uint256 uid = _groupCounter.current();\\r\\n\\r\\n        GroupListing[uid].members = _members;\\r\\n        GroupListing[uid].groupName = _groupName;\\r\\n        GroupListing[uid].description = _description;\\r\\n        GroupListing[uid].groupImage = _groupImage;\\r\\n\\r\\n        for (uint256 i = 0; i < _members.length; i++) {\\r\\n            GroupListing[uid].isMember[_members[i]] = true;\\r\\n        }\\r\\n\\r\\n        emit GroupCreated(uid, _members, _groupName, _description, _groupImage);\\r\\n    }\\r\\n\\r\\n    function getGroupDetails(uint256 _groupId) public view returns (MyGroups memory) {\\r\\n        return\\r\\n            MyGroups(\\r\\n                _groupId,\\r\\n                GroupListing[_groupId].groupName,\\r\\n                GroupListing[_groupId].description,\\r\\n                GroupListing[_groupId].groupImage,\\r\\n                GroupListing[_groupId].members\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getMyGroups() public view returns (MyGroups[] memory) {\\r\\n        address requester = msg.sender;\\r\\n\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 1; i <= _groupCounter.current(); i++) {\\r\\n            if (GroupListing[i].isMember[requester] == true) {\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        MyGroups[] memory myGroupsArray = new MyGroups[](index);\\r\\n\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        for (uint256 i = 1; i <= _groupCounter.current(); i++) {\\r\\n            if (GroupListing[i].isMember[requester] == true) {\\r\\n                myGroupsArray[currentIndex] = MyGroups(\\r\\n                    i,\\r\\n                    GroupListing[i].groupName,\\r\\n                    GroupListing[i].description,\\r\\n                    GroupListing[i].groupImage,\\r\\n                    GroupListing[i].members\\r\\n                );\\r\\n            }\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return myGroupsArray;\\r\\n    }\\r\\n\\r\\n    function addExpense(uint256 _groupId, uint256 _amount, string memory _description) external {\\r\\n        require(_groupId != 0, \\\"Group ID cannot be zero\\\");\\r\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        uint256 membersCount = (GroupListing[_groupId].members).length;\\r\\n        address[] memory members = GroupListing[_groupId].members;\\r\\n\\r\\n        uint256 splitAmount = _amount / membersCount;\\r\\n\\r\\n        expenses.push(Expense(_groupId, msg.sender, members, _amount, _description, splitAmount));\\r\\n\\r\\n        for (uint256 i = 0; i < membersCount; i++) {\\r\\n            if (members[i] == expenses[expenses.length - 1].requester) {\\r\\n                isPaid[members[i]][expenses.length - 1] = true;\\r\\n            } else {\\r\\n                isPaid[members[i]][expenses.length - 1] = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ExpenseAdded(\\r\\n            _groupId,\\r\\n            expenses.length - 1,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            _description,\\r\\n            members,\\r\\n            splitAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function viewSplits() public view returns (ViewPendingPayments[] memory) {\\r\\n        address requester = msg.sender;\\r\\n\\r\\n        uint256 pendingCount = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < expenses.length; i++) {\\r\\n            if (isPaid[requester][i] == false) {\\r\\n                pendingCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ViewPendingPayments[] memory userPayments = new ViewPendingPayments[](pendingCount);\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < expenses.length; i++) {\\r\\n            if (isPaid[requester][i] == false) {\\r\\n                userPayments[currentIndex] = ViewPendingPayments(\\r\\n                    expenses[i].groupId,\\r\\n                    i,\\r\\n                    expenses[i].requester,\\r\\n                    expenses[i].share,\\r\\n                    expenses[i].description\\r\\n                );\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return userPayments;\\r\\n    }\\r\\n\\r\\n    function getGroupExpenses(uint256 _groupId) public view returns (Expense[] memory) {\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < expenses.length; i++) {\\r\\n            if (_groupId == expenses[i].groupId) {\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        Expense[] memory groupExpenses = new Expense[](index);\\r\\n\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < expenses.length; i++) {\\r\\n            if (_groupId == expenses[i].groupId) {\\r\\n                groupExpenses[currentIndex] = Expense(\\r\\n                    expenses[i].groupId,\\r\\n                    expenses[i].requester,\\r\\n                    expenses[i].payers,\\r\\n                    expenses[i].amount,\\r\\n                    expenses[i].description,\\r\\n                    expenses[i].share\\r\\n                );\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return groupExpenses;\\r\\n    }\\r\\n\\r\\n    function paySplit(uint256 expenseId) public payable {\\r\\n        //check if expense ID is valid\\r\\n        require(expenseId < expenses.length, \\\"Invalid expense id\\\");\\r\\n        //check if user hasn't paid already\\r\\n        require(isPaid[msg.sender][expenseId] == false, \\\"Already Paid\\\");\\r\\n        //check balance\\r\\n        require(\\r\\n            celoUsd.balanceOf(msg.sender) >= expenses[expenseId].share,\\r\\n            \\\"Insufficient Balance\\\"\\r\\n        );\\r\\n\\r\\n        celoUsd.transferFrom(msg.sender, expenses[expenseId].requester, expenses[expenseId].share);\\r\\n\\r\\n        isPaid[msg.sender][expenseId] = true;\\r\\n\\r\\n        emit SplitPaid(expenses[expenseId].groupId, expenseId, msg.sender, expenses[expenseId].requester, expenses[expenseId].description, expenses[expenseId].share);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2315708e74dcc034365c3071c492d5cc86c42865311036d802a344bb86aaec9e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035a2380380620035a28339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b613478806200012a6000396000f3fe60806040526004361061009c5760003560e01c80639de5e76a116100645780639de5e76a14610179578063af4afe0a146101b6578063b197e242146101f7578063cbcce4fa14610222578063d8528f051461025f578063f999f0271461028a5761009c565b8063500b136f146100a157806365ebc80c146100de57806383eb74281461010757806385c49124146101235780639b8665451461014e575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190611e96565b6102b3565b6040516100d591906121a4565b60405180910390f35b3480156100ea57600080fd5b50610105600480360381019061010091906123ef565b610643565b005b610121600480360381019061011c9190611e96565b610822565b005b34801561012f57600080fd5b50610138610c79565b60405161014591906125fe565b60405180910390f35b34801561015a57600080fd5b50610163610fb3565b604051610170919061262f565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190611e96565b610fbf565b6040516101ad91906126d5565b60405180910390f35b3480156101c257600080fd5b506101dd60048036038101906101d89190611e96565b611269565b6040516101ee959493929190612750565b60405180910390f35b34801561020357600080fd5b5061020c611357565b6040516102199190612809565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190612824565b61137b565b604051610256919061287f565b60405180910390f35b34801561026b57600080fd5b506102746113aa565b60405161028191906129e7565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac9190612a09565b61181a565b005b60606000805b60028054905081101561031457600281815481106102da576102d9612a78565b5b90600052602060002090600602016000015484036103015781806102fd90612ad6565b9250505b808061030c90612ad6565b9150506102b9565b5060008167ffffffffffffffff811115610331576103306121cb565b5b60405190808252806020026020018201604052801561036a57816020015b610357611ce5565b81526020019060019003908161034f5790505b5090506000805b600280549050811015610637576002818154811061039257610391612a78565b5b9060005260206000209060060201600001548603610624576040518060c00160405280600283815481106103c9576103c8612a78565b5b9060005260206000209060060201600001548152602001600283815481106103f4576103f3612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002838154811061045557610454612a78565b5b90600052602060002090600602016002018054806020026020016040519081016040528092919081815260200182805480156104e657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161049c575b505050505081526020016002838154811061050457610503612a78565b5b90600052602060002090600602016003015481526020016002838154811061052f5761052e612a78565b5b9060005260206000209060060201600401805461054b90612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461057790612b4d565b80156105c45780601f10610599576101008083540402835291602001916105c4565b820191906000526020600020905b8154815290600101906020018083116105a757829003601f168201915b50505050508152602001600283815481106105e2576105e1612a78565b5b90600052602060002090600602016005015481525083838151811061060a57610609612a78565b5b6020026020010181905250818061062090612ad6565b9250505b808061062f90612ad6565b915050610371565b50819350505050919050565b6001845111610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90612bca565b60405180910390fd5b6106916001611cc1565b600061069d6001611cd7565b9050846003600083815260200190815260200160002060000190805190602001906106c9929190611d31565b50836003600083815260200190815260200160002060010190816106ed9190612d8c565b50826003600083815260200190815260200160002060020190816107119190612d8c565b50816003600083815260200190815260200160002060030190816107359190612d8c565b5060005b85518110156107db57600160036000848152602001908152602001600020600401600088848151811061076f5761076e612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806107d390612ad6565b915050610739565b507f1f46557abdf86fa0f12820bac2d0d8d8359f4f07cc5d2efefaf6f7e452d287a78186868686604051610813959493929190612ecd565b60405180910390a15050505050565b6002805490508110610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090612f88565b60405180910390fd5b60001515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151461090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090490612ff4565b60405180910390fd5b6002818154811061092157610920612a78565b5b90600052602060002090600602016005015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161098c9190613014565b602060405180830381865afa1580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd9190613044565b1015610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a05906130bd565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360028481548110610a5f57610a5e612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028581548110610aa557610aa4612a78565b5b9060005260206000209060060201600501546040518463ffffffff1660e01b8152600401610ad5939291906130dd565b6020604051808303816000875af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190613140565b506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f7eb494d4272c20eff98e6915d76418045d757eb0b1a7a5dd51133ada5a58976660028281548110610bb757610bb6612a78565b5b906000526020600020906006020160000154823360028581548110610bdf57610bde612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028681548110610c2557610c24612a78565b5b906000526020600020906006020160040160028781548110610c4a57610c49612a78565b5b906000526020600020906006020160050154604051610c6e969594939291906131f1565b60405180910390a150565b606060003390506000805b600280549050811015610d1c5760001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151503610d09578180610d0590612ad6565b9250505b8080610d1490612ad6565b915050610c84565b5060008167ffffffffffffffff811115610d3957610d386121cb565b5b604051908082528060200260200182016040528015610d7257816020015b610d5f611dbb565b815260200190600190039081610d575790505b5090506000805b600280549050811015610fa85760001515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151503610f95576040518060a0016040528060028381548110610e0e57610e0d612a78565b5b906000526020600020906006020160000154815260200182815260200160028381548110610e3f57610e3e612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028381548110610ea057610e9f612a78565b5b906000526020600020906006020160050154815260200160028381548110610ecb57610eca612a78565b5b90600052602060002090600602016004018054610ee790612b4d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1390612b4d565b8015610f605780601f10610f3557610100808354040283529160200191610f60565b820191906000526020600020905b815481529060010190602001808311610f4357829003601f168201915b5050505050815250838381518110610f7b57610f7a612a78565b5b60200260200101819052508180610f9190612ad6565b9250505b8080610fa090612ad6565b915050610d79565b508194505050505090565b60018060000154905081565b610fc7611e00565b6040518060a00160405280838152602001600360008581526020019081526020016000206001018054610ff990612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461102590612b4d565b80156110725780601f1061104757610100808354040283529160200191611072565b820191906000526020600020905b81548152906001019060200180831161105557829003601f168201915b5050505050815260200160036000858152602001908152602001600020600201805461109d90612b4d565b80601f01602080910402602001604051908101604052809291908181526020018280546110c990612b4d565b80156111165780601f106110eb57610100808354040283529160200191611116565b820191906000526020600020905b8154815290600101906020018083116110f957829003601f168201915b5050505050815260200160036000858152602001908152602001600020600301805461114190612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90612b4d565b80156111ba5780601f1061118f576101008083540402835291602001916111ba565b820191906000526020600020905b81548152906001019060200180831161119d57829003601f168201915b505050505081526020016003600085815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561125a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611210575b50505050508152509050919050565b6002818154811061127957600080fd5b90600052602060002090600602016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040180546112ce90612b4d565b80601f01602080910402602001604051908101604052809291908181526020018280546112fa90612b4d565b80156113475780601f1061131c57610100808354040283529160200191611347565b820191906000526020600020905b81548152906001019060200180831161132a57829003601f168201915b5050505050908060050154905085565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60606000339050600080600190505b6113c36001611cd7565b811161145757600115156003600083815260200190815260200160002060040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615150361144457818061144090612ad6565b9250505b808061144f90612ad6565b9150506113b9565b5060008167ffffffffffffffff811115611474576114736121cb565b5b6040519080825280602002602001820160405280156114ad57816020015b61149a611e00565b8152602001906001900390816114925790505b509050600080600190505b6114c26001611cd7565b811161180f57600115156003600083815260200190815260200160002060040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036117ee576040518060a0016040528082815260200160036000848152602001908152602001600020600101805461156690612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461159290612b4d565b80156115df5780601f106115b4576101008083540402835291602001916115df565b820191906000526020600020905b8154815290600101906020018083116115c257829003601f168201915b5050505050815260200160036000848152602001908152602001600020600201805461160a90612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461163690612b4d565b80156116835780601f1061165857610100808354040283529160200191611683565b820191906000526020600020905b81548152906001019060200180831161166657829003601f168201915b505050505081526020016003600084815260200190815260200160002060030180546116ae90612b4d565b80601f01602080910402602001604051908101604052809291908181526020018280546116da90612b4d565b80156117275780601f106116fc57610100808354040283529160200191611727565b820191906000526020600020905b81548152906001019060200180831161170a57829003601f168201915b50505050508152602001600360008481526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156117c757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161177d575b50505050508152508383815181106117e2576117e1612a78565b5b60200260200101819052505b81806117f990612ad6565b925050808061180790612ad6565b9150506114b8565b508194505050505090565b6000830361185d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611854906132a5565b60405180910390fd5b600082116118a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189790613311565b60405180910390fd5b60006003600085815260200190815260200160002060000180549050905060006003600086815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561195657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161190c575b505050505090506000828561196b9190613360565b905060026040518060c001604052808881526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018781526020018681526020018381525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190611a48929190611d31565b50606082015181600301556080820151816004019081611a689190612d8c565b5060a08201518160050155505060005b83811015611c645760026001600280549050611a949190613391565b81548110611aa557611aa4612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16838281518110611b0057611aff612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611bbc57600160046000858481518110611b3c57611b3b612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600280549050611b929190613391565b815260200190815260200160002060006101000a81548160ff021916908315150217905550611c51565b600060046000858481518110611bd557611bd4612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600280549050611c2b9190613391565b815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8080611c5c90612ad6565b915050611a78565b507fc837e29b96d18b821d15a9d2e023ba3ab496c4440cbe1f91921df760120e1104866001600280549050611c999190613391565b3388888787604051611cb197969594939291906133c5565b60405180910390a1505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215611daa579160200282015b82811115611da95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d51565b5b509050611db79190611e2f565b5090565b6040518060a001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b5b80821115611e48576000816000905550600101611e30565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611e7381611e60565b8114611e7e57600080fd5b50565b600081359050611e9081611e6a565b92915050565b600060208284031215611eac57611eab611e56565b5b6000611eba84828501611e81565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ef881611e60565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2982611efe565b9050919050565b611f3981611f1e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611f778383611f30565b60208301905092915050565b6000602082019050919050565b6000611f9b82611f3f565b611fa58185611f4a565b9350611fb083611f5b565b8060005b83811015611fe1578151611fc88882611f6b565b9750611fd383611f83565b925050600181019050611fb4565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561202857808201518184015260208101905061200d565b60008484015250505050565b6000601f19601f8301169050919050565b600061205082611fee565b61205a8185611ff9565b935061206a81856020860161200a565b61207381612034565b840191505092915050565b600060c0830160008301516120966000860182611eef565b5060208301516120a96020860182611f30565b50604083015184820360408601526120c18282611f90565b91505060608301516120d66060860182611eef565b50608083015184820360808601526120ee8282612045565b91505060a083015161210360a0860182611eef565b508091505092915050565b600061211a838361207e565b905092915050565b6000602082019050919050565b600061213a82611ec3565b6121448185611ece565b93508360208202850161215685611edf565b8060005b858110156121925784840389528151612173858261210e565b945061217e83612122565b925060208a0199505060018101905061215a565b50829750879550505050505092915050565b600060208201905081810360008301526121be818461212f565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61220382612034565b810181811067ffffffffffffffff82111715612222576122216121cb565b5b80604052505050565b6000612235611e4c565b905061224182826121fa565b919050565b600067ffffffffffffffff821115612261576122606121cb565b5b602082029050602081019050919050565b600080fd5b61228081611f1e565b811461228b57600080fd5b50565b60008135905061229d81612277565b92915050565b60006122b66122b184612246565b61222b565b905080838252602082019050602084028301858111156122d9576122d8612272565b5b835b8181101561230257806122ee888261228e565b8452602084019350506020810190506122db565b5050509392505050565b600082601f830112612321576123206121c6565b5b81356123318482602086016122a3565b91505092915050565b600080fd5b600067ffffffffffffffff82111561235a576123596121cb565b5b61236382612034565b9050602081019050919050565b82818337600083830152505050565b600061239261238d8461233f565b61222b565b9050828152602081018484840111156123ae576123ad61233a565b5b6123b9848285612370565b509392505050565b600082601f8301126123d6576123d56121c6565b5b81356123e684826020860161237f565b91505092915050565b6000806000806080858703121561240957612408611e56565b5b600085013567ffffffffffffffff81111561242757612426611e5b565b5b6124338782880161230c565b945050602085013567ffffffffffffffff81111561245457612453611e5b565b5b612460878288016123c1565b935050604085013567ffffffffffffffff81111561248157612480611e5b565b5b61248d878288016123c1565b925050606085013567ffffffffffffffff8111156124ae576124ad611e5b565b5b6124ba878288016123c1565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a08301600083015161250a6000860182611eef565b50602083015161251d6020860182611eef565b5060408301516125306040860182611f30565b5060608301516125436060860182611eef565b506080830151848203608086015261255b8282612045565b9150508091505092915050565b600061257483836124f2565b905092915050565b6000602082019050919050565b6000612594826124c6565b61259e81856124d1565b9350836020820285016125b0856124e2565b8060005b858110156125ec57848403895281516125cd8582612568565b94506125d88361257c565b925060208a019950506001810190506125b4565b50829750879550505050505092915050565b600060208201905081810360008301526126188184612589565b905092915050565b61262981611e60565b82525050565b60006020820190506126446000830184612620565b92915050565b600060a0830160008301516126626000860182611eef565b506020830151848203602086015261267a8282612045565b915050604083015184820360408601526126948282612045565b915050606083015184820360608601526126ae8282612045565b915050608083015184820360808601526126c88282611f90565b9150508091505092915050565b600060208201905081810360008301526126ef818461264a565b905092915050565b61270081611f1e565b82525050565b600082825260208201905092915050565b600061272282611fee565b61272c8185612706565b935061273c81856020860161200a565b61274581612034565b840191505092915050565b600060a0820190506127656000830188612620565b61277260208301876126f7565b61277f6040830186612620565b81810360608301526127918185612717565b90506127a06080830184612620565b9695505050505050565b6000819050919050565b60006127cf6127ca6127c584611efe565b6127aa565b611efe565b9050919050565b60006127e1826127b4565b9050919050565b60006127f3826127d6565b9050919050565b612803816127e8565b82525050565b600060208201905061281e60008301846127fa565b92915050565b6000806040838503121561283b5761283a611e56565b5b60006128498582860161228e565b925050602061285a85828601611e81565b9150509250929050565b60008115159050919050565b61287981612864565b82525050565b60006020820190506128946000830184612870565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a0830160008301516128de6000860182611eef565b50602083015184820360208601526128f68282612045565b915050604083015184820360408601526129108282612045565b9150506060830151848203606086015261292a8282612045565b915050608083015184820360808601526129448282611f90565b9150508091505092915050565b600061295d83836128c6565b905092915050565b6000602082019050919050565b600061297d8261289a565b61298781856128a5565b935083602082028501612999856128b6565b8060005b858110156129d557848403895281516129b68582612951565b94506129c183612965565b925060208a0199505060018101905061299d565b50829750879550505050505092915050565b60006020820190508181036000830152612a018184612972565b905092915050565b600080600060608486031215612a2257612a21611e56565b5b6000612a3086828701611e81565b9350506020612a4186828701611e81565b925050604084013567ffffffffffffffff811115612a6257612a61611e5b565b5b612a6e868287016123c1565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ae182611e60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b1357612b12612aa7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b6557607f821691505b602082108103612b7857612b77612b1e565b5b50919050565b7f4174206c656173742074776f206d656d62657273206973207265717569726564600082015250565b6000612bb4602083612706565b9150612bbf82612b7e565b602082019050919050565b60006020820190508181036000830152612be381612ba7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c4c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c0f565b612c568683612c0f565b95508019841693508086168417925050509392505050565b6000612c89612c84612c7f84611e60565b6127aa565b611e60565b9050919050565b6000819050919050565b612ca383612c6e565b612cb7612caf82612c90565b848454612c1c565b825550505050565b600090565b612ccc612cbf565b612cd7818484612c9a565b505050565b5b81811015612cfb57612cf0600082612cc4565b600181019050612cdd565b5050565b601f821115612d4057612d1181612bea565b612d1a84612bff565b81016020851015612d29578190505b612d3d612d3585612bff565b830182612cdc565b50505b505050565b600082821c905092915050565b6000612d6360001984600802612d45565b1980831691505092915050565b6000612d7c8383612d52565b9150826002028217905092915050565b612d9582611fee565b67ffffffffffffffff811115612dae57612dad6121cb565b5b612db88254612b4d565b612dc3828285612cff565b600060209050601f831160018114612df65760008415612de4578287015190505b612dee8582612d70565b865550612e56565b601f198416612e0486612bea565b60005b82811015612e2c57848901518255600182019150602085019450602081019050612e07565b86831015612e495784890151612e45601f891682612d52565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000612e7a82611f3f565b612e848185612e5e565b9350612e8f83611f5b565b8060005b83811015612ec0578151612ea78882611f6b565b9750612eb283611f83565b925050600181019050612e93565b5085935050505092915050565b600060a082019050612ee26000830188612620565b8181036020830152612ef48187612e6f565b90508181036040830152612f088186612717565b90508181036060830152612f1c8185612717565b90508181036080830152612f308184612717565b90509695505050505050565b7f496e76616c696420657870656e73652069640000000000000000000000000000600082015250565b6000612f72601283612706565b9150612f7d82612f3c565b602082019050919050565b60006020820190508181036000830152612fa181612f65565b9050919050565b7f416c726561647920506169640000000000000000000000000000000000000000600082015250565b6000612fde600c83612706565b9150612fe982612fa8565b602082019050919050565b6000602082019050818103600083015261300d81612fd1565b9050919050565b600060208201905061302960008301846126f7565b92915050565b60008151905061303e81611e6a565b92915050565b60006020828403121561305a57613059611e56565b5b60006130688482850161302f565b91505092915050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b60006130a7601483612706565b91506130b282613071565b602082019050919050565b600060208201905081810360008301526130d68161309a565b9050919050565b60006060820190506130f260008301866126f7565b6130ff60208301856126f7565b61310c6040830184612620565b949350505050565b61311d81612864565b811461312857600080fd5b50565b60008151905061313a81613114565b92915050565b60006020828403121561315657613155611e56565b5b60006131648482850161312b565b91505092915050565b6000815461317a81612b4d565b6131848186612706565b9450600182166000811461319f57600181146131b5576131e8565b60ff1983168652811515602002860193506131e8565b6131be85612bea565b60005b838110156131e0578154818901526001820191506020810190506131c1565b808801955050505b50505092915050565b600060c0820190506132066000830189612620565b6132136020830188612620565b61322060408301876126f7565b61322d60608301866126f7565b818103608083015261323f818561316d565b905061324e60a0830184612620565b979650505050505050565b7f47726f75702049442063616e6e6f74206265207a65726f000000000000000000600082015250565b600061328f601783612706565b915061329a82613259565b602082019050919050565b600060208201905081810360008301526132be81613282565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006132fb601d83612706565b9150613306826132c5565b602082019050919050565b6000602082019050818103600083015261332a816132ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061336b82611e60565b915061337683611e60565b92508261338657613385613331565b5b828204905092915050565b600061339c82611e60565b91506133a783611e60565b92508282039050818111156133bf576133be612aa7565b5b92915050565b600060e0820190506133da600083018a612620565b6133e76020830189612620565b6133f460408301886126f7565b6134016060830187612620565b81810360808301526134138186612717565b905081810360a08301526134278185612e6f565b905061343660c0830184612620565b9897505050505050505056fea2646970667358221220cd1da2e17138fc9affeeeeb9b04b892b41ddb5a0284065725a25ea558481bdb764736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80639de5e76a116100645780639de5e76a14610179578063af4afe0a146101b6578063b197e242146101f7578063cbcce4fa14610222578063d8528f051461025f578063f999f0271461028a5761009c565b8063500b136f146100a157806365ebc80c146100de57806383eb74281461010757806385c49124146101235780639b8665451461014e575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190611e96565b6102b3565b6040516100d591906121a4565b60405180910390f35b3480156100ea57600080fd5b50610105600480360381019061010091906123ef565b610643565b005b610121600480360381019061011c9190611e96565b610822565b005b34801561012f57600080fd5b50610138610c79565b60405161014591906125fe565b60405180910390f35b34801561015a57600080fd5b50610163610fb3565b604051610170919061262f565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190611e96565b610fbf565b6040516101ad91906126d5565b60405180910390f35b3480156101c257600080fd5b506101dd60048036038101906101d89190611e96565b611269565b6040516101ee959493929190612750565b60405180910390f35b34801561020357600080fd5b5061020c611357565b6040516102199190612809565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190612824565b61137b565b604051610256919061287f565b60405180910390f35b34801561026b57600080fd5b506102746113aa565b60405161028191906129e7565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac9190612a09565b61181a565b005b60606000805b60028054905081101561031457600281815481106102da576102d9612a78565b5b90600052602060002090600602016000015484036103015781806102fd90612ad6565b9250505b808061030c90612ad6565b9150506102b9565b5060008167ffffffffffffffff811115610331576103306121cb565b5b60405190808252806020026020018201604052801561036a57816020015b610357611ce5565b81526020019060019003908161034f5790505b5090506000805b600280549050811015610637576002818154811061039257610391612a78565b5b9060005260206000209060060201600001548603610624576040518060c00160405280600283815481106103c9576103c8612a78565b5b9060005260206000209060060201600001548152602001600283815481106103f4576103f3612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002838154811061045557610454612a78565b5b90600052602060002090600602016002018054806020026020016040519081016040528092919081815260200182805480156104e657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161049c575b505050505081526020016002838154811061050457610503612a78565b5b90600052602060002090600602016003015481526020016002838154811061052f5761052e612a78565b5b9060005260206000209060060201600401805461054b90612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461057790612b4d565b80156105c45780601f10610599576101008083540402835291602001916105c4565b820191906000526020600020905b8154815290600101906020018083116105a757829003601f168201915b50505050508152602001600283815481106105e2576105e1612a78565b5b90600052602060002090600602016005015481525083838151811061060a57610609612a78565b5b6020026020010181905250818061062090612ad6565b9250505b808061062f90612ad6565b915050610371565b50819350505050919050565b6001845111610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90612bca565b60405180910390fd5b6106916001611cc1565b600061069d6001611cd7565b9050846003600083815260200190815260200160002060000190805190602001906106c9929190611d31565b50836003600083815260200190815260200160002060010190816106ed9190612d8c565b50826003600083815260200190815260200160002060020190816107119190612d8c565b50816003600083815260200190815260200160002060030190816107359190612d8c565b5060005b85518110156107db57600160036000848152602001908152602001600020600401600088848151811061076f5761076e612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806107d390612ad6565b915050610739565b507f1f46557abdf86fa0f12820bac2d0d8d8359f4f07cc5d2efefaf6f7e452d287a78186868686604051610813959493929190612ecd565b60405180910390a15050505050565b6002805490508110610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090612f88565b60405180910390fd5b60001515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151461090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090490612ff4565b60405180910390fd5b6002818154811061092157610920612a78565b5b90600052602060002090600602016005015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161098c9190613014565b602060405180830381865afa1580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd9190613044565b1015610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a05906130bd565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360028481548110610a5f57610a5e612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028581548110610aa557610aa4612a78565b5b9060005260206000209060060201600501546040518463ffffffff1660e01b8152600401610ad5939291906130dd565b6020604051808303816000875af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190613140565b506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f7eb494d4272c20eff98e6915d76418045d757eb0b1a7a5dd51133ada5a58976660028281548110610bb757610bb6612a78565b5b906000526020600020906006020160000154823360028581548110610bdf57610bde612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028681548110610c2557610c24612a78565b5b906000526020600020906006020160040160028781548110610c4a57610c49612a78565b5b906000526020600020906006020160050154604051610c6e969594939291906131f1565b60405180910390a150565b606060003390506000805b600280549050811015610d1c5760001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151503610d09578180610d0590612ad6565b9250505b8080610d1490612ad6565b915050610c84565b5060008167ffffffffffffffff811115610d3957610d386121cb565b5b604051908082528060200260200182016040528015610d7257816020015b610d5f611dbb565b815260200190600190039081610d575790505b5090506000805b600280549050811015610fa85760001515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151503610f95576040518060a0016040528060028381548110610e0e57610e0d612a78565b5b906000526020600020906006020160000154815260200182815260200160028381548110610e3f57610e3e612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028381548110610ea057610e9f612a78565b5b906000526020600020906006020160050154815260200160028381548110610ecb57610eca612a78565b5b90600052602060002090600602016004018054610ee790612b4d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1390612b4d565b8015610f605780601f10610f3557610100808354040283529160200191610f60565b820191906000526020600020905b815481529060010190602001808311610f4357829003601f168201915b5050505050815250838381518110610f7b57610f7a612a78565b5b60200260200101819052508180610f9190612ad6565b9250505b8080610fa090612ad6565b915050610d79565b508194505050505090565b60018060000154905081565b610fc7611e00565b6040518060a00160405280838152602001600360008581526020019081526020016000206001018054610ff990612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461102590612b4d565b80156110725780601f1061104757610100808354040283529160200191611072565b820191906000526020600020905b81548152906001019060200180831161105557829003601f168201915b5050505050815260200160036000858152602001908152602001600020600201805461109d90612b4d565b80601f01602080910402602001604051908101604052809291908181526020018280546110c990612b4d565b80156111165780601f106110eb57610100808354040283529160200191611116565b820191906000526020600020905b8154815290600101906020018083116110f957829003601f168201915b5050505050815260200160036000858152602001908152602001600020600301805461114190612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90612b4d565b80156111ba5780601f1061118f576101008083540402835291602001916111ba565b820191906000526020600020905b81548152906001019060200180831161119d57829003601f168201915b505050505081526020016003600085815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561125a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611210575b50505050508152509050919050565b6002818154811061127957600080fd5b90600052602060002090600602016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040180546112ce90612b4d565b80601f01602080910402602001604051908101604052809291908181526020018280546112fa90612b4d565b80156113475780601f1061131c57610100808354040283529160200191611347565b820191906000526020600020905b81548152906001019060200180831161132a57829003601f168201915b5050505050908060050154905085565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60606000339050600080600190505b6113c36001611cd7565b811161145757600115156003600083815260200190815260200160002060040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615150361144457818061144090612ad6565b9250505b808061144f90612ad6565b9150506113b9565b5060008167ffffffffffffffff811115611474576114736121cb565b5b6040519080825280602002602001820160405280156114ad57816020015b61149a611e00565b8152602001906001900390816114925790505b509050600080600190505b6114c26001611cd7565b811161180f57600115156003600083815260200190815260200160002060040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036117ee576040518060a0016040528082815260200160036000848152602001908152602001600020600101805461156690612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461159290612b4d565b80156115df5780601f106115b4576101008083540402835291602001916115df565b820191906000526020600020905b8154815290600101906020018083116115c257829003601f168201915b5050505050815260200160036000848152602001908152602001600020600201805461160a90612b4d565b80601f016020809104026020016040519081016040528092919081815260200182805461163690612b4d565b80156116835780601f1061165857610100808354040283529160200191611683565b820191906000526020600020905b81548152906001019060200180831161166657829003601f168201915b505050505081526020016003600084815260200190815260200160002060030180546116ae90612b4d565b80601f01602080910402602001604051908101604052809291908181526020018280546116da90612b4d565b80156117275780601f106116fc57610100808354040283529160200191611727565b820191906000526020600020905b81548152906001019060200180831161170a57829003601f168201915b50505050508152602001600360008481526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156117c757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161177d575b50505050508152508383815181106117e2576117e1612a78565b5b60200260200101819052505b81806117f990612ad6565b925050808061180790612ad6565b9150506114b8565b508194505050505090565b6000830361185d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611854906132a5565b60405180910390fd5b600082116118a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189790613311565b60405180910390fd5b60006003600085815260200190815260200160002060000180549050905060006003600086815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561195657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161190c575b505050505090506000828561196b9190613360565b905060026040518060c001604052808881526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018781526020018681526020018381525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190611a48929190611d31565b50606082015181600301556080820151816004019081611a689190612d8c565b5060a08201518160050155505060005b83811015611c645760026001600280549050611a949190613391565b81548110611aa557611aa4612a78565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16838281518110611b0057611aff612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611bbc57600160046000858481518110611b3c57611b3b612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600280549050611b929190613391565b815260200190815260200160002060006101000a81548160ff021916908315150217905550611c51565b600060046000858481518110611bd557611bd4612a78565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600280549050611c2b9190613391565b815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8080611c5c90612ad6565b915050611a78565b507fc837e29b96d18b821d15a9d2e023ba3ab496c4440cbe1f91921df760120e1104866001600280549050611c999190613391565b3388888787604051611cb197969594939291906133c5565b60405180910390a1505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215611daa579160200282015b82811115611da95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d51565b5b509050611db79190611e2f565b5090565b6040518060a001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b5b80821115611e48576000816000905550600101611e30565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611e7381611e60565b8114611e7e57600080fd5b50565b600081359050611e9081611e6a565b92915050565b600060208284031215611eac57611eab611e56565b5b6000611eba84828501611e81565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ef881611e60565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2982611efe565b9050919050565b611f3981611f1e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611f778383611f30565b60208301905092915050565b6000602082019050919050565b6000611f9b82611f3f565b611fa58185611f4a565b9350611fb083611f5b565b8060005b83811015611fe1578151611fc88882611f6b565b9750611fd383611f83565b925050600181019050611fb4565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561202857808201518184015260208101905061200d565b60008484015250505050565b6000601f19601f8301169050919050565b600061205082611fee565b61205a8185611ff9565b935061206a81856020860161200a565b61207381612034565b840191505092915050565b600060c0830160008301516120966000860182611eef565b5060208301516120a96020860182611f30565b50604083015184820360408601526120c18282611f90565b91505060608301516120d66060860182611eef565b50608083015184820360808601526120ee8282612045565b91505060a083015161210360a0860182611eef565b508091505092915050565b600061211a838361207e565b905092915050565b6000602082019050919050565b600061213a82611ec3565b6121448185611ece565b93508360208202850161215685611edf565b8060005b858110156121925784840389528151612173858261210e565b945061217e83612122565b925060208a0199505060018101905061215a565b50829750879550505050505092915050565b600060208201905081810360008301526121be818461212f565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61220382612034565b810181811067ffffffffffffffff82111715612222576122216121cb565b5b80604052505050565b6000612235611e4c565b905061224182826121fa565b919050565b600067ffffffffffffffff821115612261576122606121cb565b5b602082029050602081019050919050565b600080fd5b61228081611f1e565b811461228b57600080fd5b50565b60008135905061229d81612277565b92915050565b60006122b66122b184612246565b61222b565b905080838252602082019050602084028301858111156122d9576122d8612272565b5b835b8181101561230257806122ee888261228e565b8452602084019350506020810190506122db565b5050509392505050565b600082601f830112612321576123206121c6565b5b81356123318482602086016122a3565b91505092915050565b600080fd5b600067ffffffffffffffff82111561235a576123596121cb565b5b61236382612034565b9050602081019050919050565b82818337600083830152505050565b600061239261238d8461233f565b61222b565b9050828152602081018484840111156123ae576123ad61233a565b5b6123b9848285612370565b509392505050565b600082601f8301126123d6576123d56121c6565b5b81356123e684826020860161237f565b91505092915050565b6000806000806080858703121561240957612408611e56565b5b600085013567ffffffffffffffff81111561242757612426611e5b565b5b6124338782880161230c565b945050602085013567ffffffffffffffff81111561245457612453611e5b565b5b612460878288016123c1565b935050604085013567ffffffffffffffff81111561248157612480611e5b565b5b61248d878288016123c1565b925050606085013567ffffffffffffffff8111156124ae576124ad611e5b565b5b6124ba878288016123c1565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a08301600083015161250a6000860182611eef565b50602083015161251d6020860182611eef565b5060408301516125306040860182611f30565b5060608301516125436060860182611eef565b506080830151848203608086015261255b8282612045565b9150508091505092915050565b600061257483836124f2565b905092915050565b6000602082019050919050565b6000612594826124c6565b61259e81856124d1565b9350836020820285016125b0856124e2565b8060005b858110156125ec57848403895281516125cd8582612568565b94506125d88361257c565b925060208a019950506001810190506125b4565b50829750879550505050505092915050565b600060208201905081810360008301526126188184612589565b905092915050565b61262981611e60565b82525050565b60006020820190506126446000830184612620565b92915050565b600060a0830160008301516126626000860182611eef565b506020830151848203602086015261267a8282612045565b915050604083015184820360408601526126948282612045565b915050606083015184820360608601526126ae8282612045565b915050608083015184820360808601526126c88282611f90565b9150508091505092915050565b600060208201905081810360008301526126ef818461264a565b905092915050565b61270081611f1e565b82525050565b600082825260208201905092915050565b600061272282611fee565b61272c8185612706565b935061273c81856020860161200a565b61274581612034565b840191505092915050565b600060a0820190506127656000830188612620565b61277260208301876126f7565b61277f6040830186612620565b81810360608301526127918185612717565b90506127a06080830184612620565b9695505050505050565b6000819050919050565b60006127cf6127ca6127c584611efe565b6127aa565b611efe565b9050919050565b60006127e1826127b4565b9050919050565b60006127f3826127d6565b9050919050565b612803816127e8565b82525050565b600060208201905061281e60008301846127fa565b92915050565b6000806040838503121561283b5761283a611e56565b5b60006128498582860161228e565b925050602061285a85828601611e81565b9150509250929050565b60008115159050919050565b61287981612864565b82525050565b60006020820190506128946000830184612870565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a0830160008301516128de6000860182611eef565b50602083015184820360208601526128f68282612045565b915050604083015184820360408601526129108282612045565b9150506060830151848203606086015261292a8282612045565b915050608083015184820360808601526129448282611f90565b9150508091505092915050565b600061295d83836128c6565b905092915050565b6000602082019050919050565b600061297d8261289a565b61298781856128a5565b935083602082028501612999856128b6565b8060005b858110156129d557848403895281516129b68582612951565b94506129c183612965565b925060208a0199505060018101905061299d565b50829750879550505050505092915050565b60006020820190508181036000830152612a018184612972565b905092915050565b600080600060608486031215612a2257612a21611e56565b5b6000612a3086828701611e81565b9350506020612a4186828701611e81565b925050604084013567ffffffffffffffff811115612a6257612a61611e5b565b5b612a6e868287016123c1565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ae182611e60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b1357612b12612aa7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b6557607f821691505b602082108103612b7857612b77612b1e565b5b50919050565b7f4174206c656173742074776f206d656d62657273206973207265717569726564600082015250565b6000612bb4602083612706565b9150612bbf82612b7e565b602082019050919050565b60006020820190508181036000830152612be381612ba7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c4c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c0f565b612c568683612c0f565b95508019841693508086168417925050509392505050565b6000612c89612c84612c7f84611e60565b6127aa565b611e60565b9050919050565b6000819050919050565b612ca383612c6e565b612cb7612caf82612c90565b848454612c1c565b825550505050565b600090565b612ccc612cbf565b612cd7818484612c9a565b505050565b5b81811015612cfb57612cf0600082612cc4565b600181019050612cdd565b5050565b601f821115612d4057612d1181612bea565b612d1a84612bff565b81016020851015612d29578190505b612d3d612d3585612bff565b830182612cdc565b50505b505050565b600082821c905092915050565b6000612d6360001984600802612d45565b1980831691505092915050565b6000612d7c8383612d52565b9150826002028217905092915050565b612d9582611fee565b67ffffffffffffffff811115612dae57612dad6121cb565b5b612db88254612b4d565b612dc3828285612cff565b600060209050601f831160018114612df65760008415612de4578287015190505b612dee8582612d70565b865550612e56565b601f198416612e0486612bea565b60005b82811015612e2c57848901518255600182019150602085019450602081019050612e07565b86831015612e495784890151612e45601f891682612d52565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000612e7a82611f3f565b612e848185612e5e565b9350612e8f83611f5b565b8060005b83811015612ec0578151612ea78882611f6b565b9750612eb283611f83565b925050600181019050612e93565b5085935050505092915050565b600060a082019050612ee26000830188612620565b8181036020830152612ef48187612e6f565b90508181036040830152612f088186612717565b90508181036060830152612f1c8185612717565b90508181036080830152612f308184612717565b90509695505050505050565b7f496e76616c696420657870656e73652069640000000000000000000000000000600082015250565b6000612f72601283612706565b9150612f7d82612f3c565b602082019050919050565b60006020820190508181036000830152612fa181612f65565b9050919050565b7f416c726561647920506169640000000000000000000000000000000000000000600082015250565b6000612fde600c83612706565b9150612fe982612fa8565b602082019050919050565b6000602082019050818103600083015261300d81612fd1565b9050919050565b600060208201905061302960008301846126f7565b92915050565b60008151905061303e81611e6a565b92915050565b60006020828403121561305a57613059611e56565b5b60006130688482850161302f565b91505092915050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b60006130a7601483612706565b91506130b282613071565b602082019050919050565b600060208201905081810360008301526130d68161309a565b9050919050565b60006060820190506130f260008301866126f7565b6130ff60208301856126f7565b61310c6040830184612620565b949350505050565b61311d81612864565b811461312857600080fd5b50565b60008151905061313a81613114565b92915050565b60006020828403121561315657613155611e56565b5b60006131648482850161312b565b91505092915050565b6000815461317a81612b4d565b6131848186612706565b9450600182166000811461319f57600181146131b5576131e8565b60ff1983168652811515602002860193506131e8565b6131be85612bea565b60005b838110156131e0578154818901526001820191506020810190506131c1565b808801955050505b50505092915050565b600060c0820190506132066000830189612620565b6132136020830188612620565b61322060408301876126f7565b61322d60608301866126f7565b818103608083015261323f818561316d565b905061324e60a0830184612620565b979650505050505050565b7f47726f75702049442063616e6e6f74206265207a65726f000000000000000000600082015250565b600061328f601783612706565b915061329a82613259565b602082019050919050565b600060208201905081810360008301526132be81613282565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006132fb601d83612706565b9150613306826132c5565b602082019050919050565b6000602082019050818103600083015261332a816132ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061336b82611e60565b915061337683611e60565b92508261338657613385613331565b5b828204905092915050565b600061339c82611e60565b91506133a783611e60565b92508282039050818111156133bf576133be612aa7565b5b92915050565b600060e0820190506133da600083018a612620565b6133e76020830189612620565b6133f460408301886126f7565b6134016060830187612620565b81810360808301526134138186612717565b905081810360a08301526134278185612e6f565b905061343660c0830184612620565b9897505050505050505056fea2646970667358221220cd1da2e17138fc9affeeeeb9b04b892b41ddb5a0284065725a25ea558481bdb764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1359,
        "contract": "contracts/CeloSplit.sol:CeloSplit",
        "label": "celoUsd",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 1366,
        "contract": "contracts/CeloSplit.sol:CeloSplit",
        "label": "_groupCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)83_storage"
      },
      {
        "astId": 1433,
        "contract": "contracts/CeloSplit.sol:CeloSplit",
        "label": "expenses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Expense)1392_storage)dyn_storage"
      },
      {
        "astId": 1438,
        "contract": "contracts/CeloSplit.sol:CeloSplit",
        "label": "GroupListing",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Group)1406_storage)"
      },
      {
        "astId": 1444,
        "contract": "contracts/CeloSplit.sol:CeloSplit",
        "label": "isPaid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Expense)1392_storage)dyn_storage": {
        "base": "t_struct(Expense)1392_storage",
        "encoding": "dynamic_array",
        "label": "struct CeloSplit.Expense[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Group)1406_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloSplit.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)1406_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)83_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Expense)1392_storage": {
        "encoding": "inplace",
        "label": "struct CeloSplit.Expense",
        "members": [
          {
            "astId": 1380,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "groupId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1382,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1385,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "payers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1387,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1389,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1391,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "share",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Group)1406_storage": {
        "encoding": "inplace",
        "label": "struct CeloSplit.Group",
        "members": [
          {
            "astId": 1395,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1397,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "groupName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1399,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1401,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "groupImage",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1405,
            "contract": "contracts/CeloSplit.sol:CeloSplit",
            "label": "isMember",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
